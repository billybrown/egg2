/////////////////////////////////////-+++-/////////////////////////////////////////
// Grid
//
// This is a mixin for applying grids. It uses flexbox with an 
// inline-block fallback using modernizr.
//
// The inline-block layout is based on the toast grid: http://daneden.github.io/Toast/
//
// Supports ie9+. For ie8 and lower be sure to include selectivizr - selectivizr.com
//
// use the mixin like so:
//
//      .MyExampleClass {
//          @include multiRowGrid--gutter( 800px, 30px, 33.3333% );
//      }
//
/////////////////////////////////////-+++-/////////////////////////////////////////



// $bp: the breakpoint for when the grid is triggered
// $gutter: the space in between the elements
// $width: the width of the columns (defaults to 100% and can be overridden)
// $bp* and $width* are for when you want the grid to change at different breakpoints

@mixin grid($bp, $width: 100%, $bp2: "", $width2: "", $bp3: "", $width3: "", $bp4: "", $width4: "") {
    list-style: none;
    margin: 0;
    padding: 0;

    @include mq($from: $bp) {
        display: flex;
        flex-wrap: wrap;

        .no-flexbox & {
            display: block;
        }
    }

    & > div,
    & > li {
        min-height: 1px;
        
        @include mq($from: $bp) {
            width: $width;

            .no-flexbox & {
                margin-right: -0.25em;
                vertical-align: top;
                display: inline-block;
            }
        }

        @if $bp2 != "" {

            @include mq($from: $bp2) {
                width: $width2;
            }
        }

        @if $bp3 != "" {

            @include mq($from: $bp3) {
                width: $width3;
            }
        }

        @if $bp4 != "" {

            @include mq($from: $bp4) {
                width: $width4;
            }
        }
    }
}



/////////////////////////////////////-+++-
// a version with gutters

@mixin grid--gutter($bp, $gutter, $width: 100%, $bp2: "", $width2: "", $bp3: "", $width3: "", $bp4: "", $width4: "") {
    @include grid($bp, $width, $bp2, $width2, $bp3, $width3, $bp4, $width4);
    
    @include mq($from: $bp) {
        margin-left: -$gutter;
        width: calc(100% + #{$gutter});
        margin-bottom: -$gutter;

        .no-flexbox & {
            width: 100%;
        }
    }

    & > div,
    & > li {
            margin-bottom: $gutter; // dont use last-child here, there are issues
        
        @include mq($from: $bp) {
            padding-left: $gutter;
        }
    }
}



/////////////////////////////////////-+++-
// a version with a border in between the rows

@mixin grid--rowBorder($bp, $gutter, $bordercolor, $borderwidth, $width: 100%, $bp2: "", $width2: "", $bp3: "", $width3: "", $bp4: "", $width4: "") {
    @include grid--gutter($bp, $gutter, $width, $bp2, $width2, $bp3, $width3, $bp4, $width4);
    padding-bottom: 1px;

    @include mq($from: $bp) {
        overflow: hidden;
    }

    & > div,
    & > li {
        position: relative;
        padding-top: $gutter * 0.75;
        padding-bottom: $gutter * 0.75;

        // &, 
        &:not(:last-child) {
            margin-bottom: -$borderwidth;
        }

        &:before,
        &:after {
            content: "";
            width: 100%;
            height: $borderwidth;
            background: $bordercolor;
            display: none;

            @include mq($from: $bp) {
                display: block;
            }
        }

        &:before {
            @include mq($from: $bp) {
                //left: $gutter;
                top: 0;
                right: auto;
                bottom: 0;
                left: auto;
            }
        }

        &:after {

            @include mq($from: $bp) {
                //left: $gutter;
                top: auto;
                right: auto;
                bottom: 0;
                left: 0;
            }
        }
    }
}

